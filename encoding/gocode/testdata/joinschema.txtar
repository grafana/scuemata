-- in.cue --
package generate

import "github.com/grafana/thema"

thema.#Lineage
name: "joined"
joinSchema: {
    joinedField1: string
    joinedField2: int32
}
seqs: [
    {
        schemas: [
            {
                normalField1: bool
                normalField2: [...string]
            }
        ]
    }
]

-- out/generate/0.0/depointerized.go --
package defaultchange

// Joined defines model for joined.
type Joined struct {
	JoinedField1 string   `json:"joinedField1"`
	JoinedField2 int32    `json:"joinedField2"`
	NormalField1 bool     `json:"normalField1"`
	NormalField2 []string `json:"normalField2"`
}
-- out/generate/0.0/expandref.go --
package defaultchange

// Joined defines model for joined.
type Joined struct {
	JoinedField1 string   `json:"joinedField1"`
	JoinedField2 int32    `json:"joinedField2"`
	NormalField1 bool     `json:"normalField1"`
	NormalField2 []string `json:"normalField2"`
}
-- out/generate/0.0/godeclincomments.go --
package defaultchange

// Joined defines model for joined.
type Joined struct {
	JoinedField1 string   `json:"joinedField1"`
	JoinedField2 int32    `json:"joinedField2"`
	NormalField1 bool     `json:"normalField1"`
	NormalField2 []string `json:"normalField2"`
}
-- out/generate/0.0/group.go --
package defaultchange

// JoinedField1 defines model for joinedField1.
type JoinedField1 = string

// JoinedField2 defines model for joinedField2.
type JoinedField2 = int32

// NormalField1 defines model for normalField1.
type NormalField1 = bool

// NormalField2 defines model for normalField2.
type NormalField2 = []string
-- out/generate/0.0/nil.go --
package joined

// Joined defines model for joined.
type Joined struct {
	JoinedField1 string   `json:"joinedField1"`
	JoinedField2 int32    `json:"joinedField2"`
	NormalField1 bool     `json:"normalField1"`
	NormalField2 []string `json:"normalField2"`
}
