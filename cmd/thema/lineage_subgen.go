package main

import (
	"fmt"

	"cuelang.org/go/pkg/encoding/yaml"
	"github.com/grafana/thema"
	"github.com/grafana/thema/encoding/openapi"
	"github.com/spf13/cobra"
)

type genCommand struct {
	name    string
	cuepath string
	pkgname string
	srcpath string
	input   []byte

	err error
}

func (gc *genCommand) setup(cmd *cobra.Command) {
	cmd.AddCommand(genLineageCmd)
	addLinPathVars(genLineageCmd)

	genLineageCmd.AddCommand(genOapiLineageCmd)
	genOapiLineageCmd.Flags().StringVarP((*string)(&verstr), "version", "v", "", "schema syntactic version to generate. defaults to latest")
	genOapiLineageCmd.Flags().StringVarP(&encoding, "format", "f", "yaml", "output format. \"json\" or \"yaml\".")

	genLineageCmd.AddCommand(genJschLineageCmd)
	genJschLineageCmd.Flags().StringVarP((*string)(&verstr), "version", "v", "", "schema syntactic version to generate. defaults to latest")
	genJschLineageCmd.Flags().StringVarP(&encoding, "format", "f", "json", "output format. \"json\" or \"yaml\".")

	genLineageCmd.AddCommand(genTSTypesLineageCmd)
	genTSTypesLineageCmd.Flags().StringVarP((*string)(&verstr), "version", "v", "", "schema syntactic version to generate. defaults to latest")

	genLineageCmd.AddCommand(genGoTypesLineageCmd)
	genGoTypesLineageCmd.Flags().StringVarP((*string)(&verstr), "version", "v", "", "schema syntactic version to generate. defaults to latest")

	genLineageCmd.AddCommand(genGoBindingsLineageCmd)
}

var genLineageCmd = &cobra.Command{
	Use:   "gen",
	Short: "Generate code from a lineage",
	Long: `Generate code from a lineage and its schemas.

Each subcommand supports generating code for a different language target.

Note that the controls offered by each subcommand are intentionally simplified.
But, each subcommand is implemented as a thin layer atop the packages in
github.com/grafana/thema/encoding/*. If the CLI lacks the fine-grained control
you require, it is recommended to write your own code generator using those packages.
`,
	PersistentPreRunE: mergeCobraefuncs(validateLineageInput, validateVersionInputOptional),
}

var genOapiLineageCmd = &cobra.Command{
	Use:   "openapi",
	Short: "Generate OpenAPI from a lineage",
	Long: `Generate OpenAPI from a lineage.

Generate an OpenAPI document containing a OpenAPI schema components representing a
single schema in a lineage.

Only OpenAPI 3.0 is currently supported.
`,
	RunE: func(cmd *cobra.Command, args []string) error {
		if sch == nil {
			sch = thema.SchemaP(lin, thema.LatestVersion(lin))
		}
		f, err := openapi.GenerateSchema(sch, nil)
		if err != nil {
			return err
		}

		var str string
		switch encoding {
		case "json":
			var b []byte
			b, err = rt.Context().BuildFile(f).MarshalJSON()
			if b != nil {
				str = string(b)
			}
		case "", "yaml", "yml":
			str, err = yaml.Marshal(rt.Context().BuildFile(f))
		default:
			fmt.Fprintf(cmd.ErrOrStderr(), `unrecognized output format %q - must choose "yaml" or "json"`, encoding)
		}
		if err != nil {
			return err
		}
		fmt.Fprintf(cmd.OutOrStdout(), str)
		return nil
	},
}

var genJschLineageCmd = &cobra.Command{
	Use:   "jsonschema",
	Short: "Generate JSON Schema from a lineage",
	Long: `Generate JSON Schema from a lineage.

Generate a JSON Schema document representing a single schema in a lineage.
`,
}

var genGoTypesLineageCmd = &cobra.Command{
	Use:   "gotypes",
	Short: "Generate Go types from a lineage",
	Long: `Generate Go types from a lineage.

Generate a JSON Schema document representing a single schema in a lineage.
`,
}

var genGoBindingsLineageCmd = &cobra.Command{
	Use:   "gobindings",
	Short: "Generate Go bindings for a lineage",
	Long: `Generate Go bindings for a lineage.

Generate Go bindings to a Thema lineage. These bindings provide access to the
key Thema operations (see "thema help data") in a running Go program, for that
particular lineage.

Go types are currently generated by first translating Thema to OpenAPI, then
relying on OpenAPI code generators.
`,
}

var genTSTypesLineageCmd = &cobra.Command{
	Use:   "gotypes",
	Short: "Generate TypeScript types from a lineage",
	Long: `Generate TypeScript types from a lineage.

Generate a JSON Schema document representing a single schema in a lineage.
`,
}
