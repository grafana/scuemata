# a schema containing various different combinations of map-ish structures

#subpath
-- in.cue --
import "github.com/grafana/thema"

thema.#Lineage
name: "maps"
schemas: [{
	version: [0, 0]
	schema: {
		valPrimitive: [string]: bool
		valList: [string]: [...string]
		valStruct: [string]: foo: string
		optValPrimitive?: [string]: bool
		optValList?: [string]: [...string]
		optValStruct?: [string]: foo: string
		refValue: [string]: aStruct
		someField: aMap

        aComplexMap?: {
            foo:      string  // foo is a string
            [=~"^i"]: int     // all other fields starting with i are integers
            [=~"^b"]: bool    // all other fields starting with b are booleans
            [>"c"]:   string  // all other fields lexically after c are strings
        }
	}
}]
lenses: []

aMap: [string]: bool
aStruct: foo:   string
-- in/validate/TestValidate/missingFields.data.json --
{
    "aComplexMap": {
        "foo": 42,
        "iShouldBeAnInt": "but I am not",
        "bShouldBeABool": "but I am a string",
        "cShouldBeAString": 1
    }
}
-- out/validate/TestValidate/missingFields --
<maps@v0.0>.aComplexMap.foo: validation failed, data is not an instance:
	schema expected `string`
		/in.cue:18:23
		/cue.mod/pkg/github.com/grafana/thema/lineage.cue:234:20
	but data contained `42`
		test:3:16
<maps@v0.0>.aComplexMap.iShouldBeAnInt: validation failed, data is not an instance:
	schema expected `int`
		/in.cue:19:23
		/cue.mod/pkg/github.com/grafana/thema/lineage.cue:234:20
	but data contained `"but I am not"`
		test:4:27
<maps@v0.0>.aComplexMap.bShouldBeABool: validation failed, data is not an instance:
	schema expected `bool`
		/in.cue:20:23
		/cue.mod/pkg/github.com/grafana/thema/lineage.cue:234:20
	but data contained `"but I am a string"`
		test:5:27
<maps@v0.0>.aComplexMap.cShouldBeAString: validation failed, data is not an instance:
	schema expected `string`
		/in.cue:21:23
		/cue.mod/pkg/github.com/grafana/thema/lineage.cue:234:20
	but data contained `1`
		test:6:29
-- out/encoding/openapi/TestGenerate/nilcfg --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "maps",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "aMap": {
        "type": "object",
        "additionalProperties": {
          "type": "boolean"
        }
      },
      "aStruct": {
        "type": "object",
        "required": [
          "foo"
        ],
        "properties": {
          "foo": {
            "type": "string"
          }
        }
      },
      "maps": {
        "type": "object",
        "required": [
          "valPrimitive",
          "valList",
          "valStruct",
          "refValue",
          "someField"
        ],
        "properties": {
          "valPrimitive": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "valList": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "valStruct": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "required": [
                "foo"
              ],
              "properties": {
                "foo": {
                  "type": "string"
                }
              }
            }
          },
          "optValPrimitive": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "optValList": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "optValStruct": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "required": [
                "foo"
              ],
              "properties": {
                "foo": {
                  "type": "string"
                }
              }
            }
          },
          "refValue": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/aStruct"
            }
          },
          "someField": {
            "$ref": "#/components/schemas/aMap"
          },
          "aComplexMap": {
            "type": "object",
            "required": [
              "foo"
            ],
            "properties": {
              "foo": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}
-- out/encoding/openapi/TestGenerate/group --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "maps",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "valPrimitive": {
        "type": "object",
        "additionalProperties": {
          "type": "boolean"
        }
      },
      "valList": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "valStruct": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "required": [
            "foo"
          ],
          "properties": {
            "foo": {
              "type": "string"
            }
          }
        }
      },
      "optValPrimitive": {
        "type": "object",
        "additionalProperties": {
          "type": "boolean"
        }
      },
      "optValList": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "optValStruct": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "required": [
            "foo"
          ],
          "properties": {
            "foo": {
              "type": "string"
            }
          }
        }
      },
      "aStruct": {
        "type": "object",
        "required": [
          "foo"
        ],
        "properties": {
          "foo": {
            "type": "string"
          }
        }
      },
      "refValue": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/aStruct"
        }
      },
      "someField": {
        "type": "object",
        "additionalProperties": {
          "type": "boolean"
        }
      },
      "aComplexMap": {
        "type": "object",
        "required": [
          "foo"
        ],
        "properties": {
          "foo": {
            "type": "string"
          }
        }
      }
    }
  }
}
-- out/encoding/gocode/TestGenerate/depointerized --
== maps_type_0.0_gen.go
package maps

// AMap defines model for aMap.
type AMap map[string]bool

// AStruct defines model for aStruct.
type AStruct struct {
	Foo string `json:"foo"`
}

// Maps defines model for maps.
type Maps struct {
	AComplexMap struct {
		Foo string `json:"foo"`
	} `json:"aComplexMap,omitempty"`
	OptValList      map[string][]string `json:"optValList,omitempty"`
	OptValPrimitive map[string]bool     `json:"optValPrimitive,omitempty"`
	OptValStruct    map[string]struct {
		Foo string `json:"foo"`
	} `json:"optValStruct,omitempty"`
	RefValue     map[string]AStruct  `json:"refValue"`
	SomeField    AMap                `json:"someField"`
	ValList      map[string][]string `json:"valList"`
	ValPrimitive map[string]bool     `json:"valPrimitive"`
	ValStruct    map[string]struct {
		Foo string `json:"foo"`
	} `json:"valStruct"`
}
-- out/encoding/openapi/TestGenerate/expandrefs --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "maps",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "maps": {
        "type": "object",
        "required": [
          "valPrimitive",
          "valList",
          "valStruct",
          "refValue",
          "someField"
        ],
        "properties": {
          "valPrimitive": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "valList": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "valStruct": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "required": [
                "foo"
              ],
              "properties": {
                "foo": {
                  "type": "string"
                }
              }
            }
          },
          "optValPrimitive": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "optValList": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "optValStruct": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "required": [
                "foo"
              ],
              "properties": {
                "foo": {
                  "type": "string"
                }
              }
            }
          },
          "refValue": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "required": [
                "foo"
              ],
              "properties": {
                "foo": {
                  "type": "string"
                }
              }
            }
          },
          "someField": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "aComplexMap": {
            "type": "object",
            "required": [
              "foo"
            ],
            "properties": {
              "foo": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}
-- out/encoding/openapi/TestGenerate/subpath --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "someField",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "someField": {
        "type": "object",
        "additionalProperties": {
          "type": "boolean"
        }
      }
    }
  }
}
-- out/encoding/openapi/TestGenerate/subpathroot --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "overriddenName",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "overriddenName": {
        "type": "object",
        "additionalProperties": {
          "type": "boolean"
        }
      }
    }
  }
}
-- out/encoding/gocode/TestGenerate/godeclincomments --
== maps_type_0.0_gen.go
package maps

// AMap defines model for aMap.
type AMap map[string]bool

// AStruct defines model for aStruct.
type AStruct struct {
	Foo string `json:"foo"`
}

// Maps defines model for maps.
type Maps struct {
	AComplexMap *struct {
		Foo string `json:"foo"`
	} `json:"aComplexMap,omitempty"`
	OptValList      map[string][]string `json:"optValList,omitempty"`
	OptValPrimitive map[string]bool     `json:"optValPrimitive,omitempty"`
	OptValStruct    map[string]struct {
		Foo string `json:"foo"`
	} `json:"optValStruct,omitempty"`
	RefValue     map[string]AStruct  `json:"refValue"`
	SomeField    AMap                `json:"someField"`
	ValList      map[string][]string `json:"valList"`
	ValPrimitive map[string]bool     `json:"valPrimitive"`
	ValStruct    map[string]struct {
		Foo string `json:"foo"`
	} `json:"valStruct"`
}
-- out/encoding/gocode/TestGenerate/expandref --
== maps_type_0.0_gen.go
package maps

// Maps defines model for maps.
type Maps struct {
	AComplexMap *struct {
		Foo string `json:"foo"`
	} `json:"aComplexMap,omitempty"`
	OptValList      map[string][]string `json:"optValList,omitempty"`
	OptValPrimitive map[string]bool     `json:"optValPrimitive,omitempty"`
	OptValStruct    map[string]struct {
		Foo string `json:"foo"`
	} `json:"optValStruct,omitempty"`
	RefValue map[string]struct {
		Foo string `json:"foo"`
	} `json:"refValue"`
	SomeField    map[string]bool     `json:"someField"`
	ValList      map[string][]string `json:"valList"`
	ValPrimitive map[string]bool     `json:"valPrimitive"`
	ValStruct    map[string]struct {
		Foo string `json:"foo"`
	} `json:"valStruct"`
}
-- out/bind --
Schema count: 1
Schema versions: 0.0
Lenses count: 0
-- out/encoding/gocode/TestGenerate/nilcfg --
== maps_type_0.0_gen.go
package maps

// AMap defines model for aMap.
type AMap map[string]bool

// AStruct defines model for aStruct.
type AStruct struct {
	Foo string `json:"foo"`
}

// Maps defines model for maps.
type Maps struct {
	AComplexMap *struct {
		Foo string `json:"foo"`
	} `json:"aComplexMap,omitempty"`
	OptValList      map[string][]string `json:"optValList,omitempty"`
	OptValPrimitive map[string]bool     `json:"optValPrimitive,omitempty"`
	OptValStruct    map[string]struct {
		Foo string `json:"foo"`
	} `json:"optValStruct,omitempty"`
	RefValue     map[string]AStruct  `json:"refValue"`
	SomeField    AMap                `json:"someField"`
	ValList      map[string][]string `json:"valList"`
	ValPrimitive map[string]bool     `json:"valPrimitive"`
	ValStruct    map[string]struct {
		Foo string `json:"foo"`
	} `json:"valStruct"`
}
-- out/encoding/gocode/TestGenerate/group --
== maps_type_0.0_gen.go
package maps

// AComplexMap defines model for aComplexMap.
type AComplexMap struct {
	Foo string `json:"foo"`
}

// AStruct defines model for aStruct.
type AStruct struct {
	Foo string `json:"foo"`
}

// OptValList defines model for optValList.
type OptValList map[string][]string

// OptValPrimitive defines model for optValPrimitive.
type OptValPrimitive map[string]bool

// OptValStruct defines model for optValStruct.
type OptValStruct map[string]struct {
	Foo string `json:"foo"`
}

// RefValue defines model for refValue.
type RefValue map[string]AStruct

// SomeField defines model for someField.
type SomeField map[string]bool

// ValList defines model for valList.
type ValList map[string][]string

// ValPrimitive defines model for valPrimitive.
type ValPrimitive map[string]bool

// ValStruct defines model for valStruct.
type ValStruct map[string]struct {
	Foo string `json:"foo"`
}
-- out/encoding/typescript/TestGenerate/nilcfg --
export interface Maps {
  aComplexMap?: {
    foo: string;
  };
  optValList?: Record<string, Array<string>>;
  optValPrimitive?: Record<string, boolean>;
  optValStruct?: Record<string, {
  foo: string,
}>;
  refValue: Record<string, {
  foo: string,
}>;
  someField: Record<string, boolean>;
  valList: Record<string, Array<string>>;
  valPrimitive: Record<string, boolean>;
  valStruct: Record<string, {
  foo: string,
}>;
}
