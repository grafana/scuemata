# joinSchema contains references to external definitions
-- in.cue --
import "github.com/grafana/thema"

thema.#Lineage
name: "joined"
joinSchema: {
    ref: ExRef
    refdef: #ExRefDef
}
schemas: [{
	version: [0, 0]
	schema: {
		foo: string
	}
}]
lenses: []

ExRef: {
	normalField: string
}

#ExRefDef: {
	defField: string
}
-- out/encoding/openapi/TestGenerateVanilla/nilcfg --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "joined"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"ExRef": {
				"type": "object", "required": ["normalField"]
				"properties": {
					"normalField": {
						"type": "string"
					}
				}
			}
			"ExRefDef": {
				"type": "object", "required": ["defField"]
				"properties": {
					"defField": {
						"type": "string"
					}
				}
			}
			"joined": {
				"type": "object", "properties": {
					"ref": {
						"$ref": "#/components/schemas/ExRef"
					}
					"refdef": {
						"$ref": "#/components/schemas/ExRefDef"
					}
					"foo": {
						"type": "string"
					}
				}
				"allOf": [{
					"required": ["ref", "refdef"]
				}, {
					"required": ["foo"]
				}]
			}
		}
	}
}
-- out/encoding/openapi/TestGenerateVanilla/group --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "joined"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"ref": {
				"type": "object", "required": ["normalField"]
				"properties": {
					"normalField": {
						"type": "string"
					}
				}
			}
			"foo": {
				"type": "string"
			}
			"refdef": {
				"type": "object", "required": ["defField"]
				"properties": {
					"defField": {
						"type": "string"
					}
				}
			}
		}
	}
}
-- out/encoding/openapi/TestGenerateVanilla/expandrefs --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "joined"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"joined": {
				"type": "object", "required": ["ref", "foo", "refdef"]
				"properties": {
					"ref": {
						"type": "object", "required": ["normalField"]
						"properties": {
							"normalField": {
								"type": "string"
							}
						}
					}
					"foo": {
						"type": "string"
					}
					"refdef": {
						"type": "object", "required": ["defField"]
						"properties": {
							"defField": {
								"type": "string"
							}
						}
					}
				}
			}
		}
	}
}
-- out/encoding/openapi/TestGenerateVanilla/selfcontained --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "joined"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"ExRef": {
				"type": "object", "required": ["normalField"]
				"properties": {
					"normalField": {
						"type": "string"
					}
				}
			}
			"ExRefDef": {
				"type": "object", "required": ["defField"]
				"properties": {
					"defField": {
						"type": "string"
					}
				}
			}
			"embedref": {
				"type": "object", "$ref": "#/components/schemas/joinSchema"
			}
			"joinSchema": {
				"type": "object", "required": ["ref", "refdef"]
				"properties": {
					"ref": {
						"$ref": "#/components/schemas/ExRef"
					}
					"refdef": {
						"$ref": "#/components/schemas/ExRefDef"
					}
				}
				"minProperties": 1
			}
			"joined": {
				"type": "object", "$ref": "#/components/schemas/embedref"
			}
		}
	}
}
-- out/encoding/openapi/TestGenerateVanilla/subpath --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "someField"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"EmbedRef": {
				"type": "object", "required": ["refField1", "refField2"]
				"properties": {
					"refField1": {
						"type": "string"
					}
					"refField2": {
						"type": "integer", "enum": [42]
					}
				}
			}
			"someField": {
				"type": "object", "properties": {
					"run": {
						"type": "integer", "format": "int32"
					}
					"tell": {
						"type": "string", "format": "binary"
					}
					"dat": {
						"type": "array", "items": {
							"type": "string"
						}
					}
				}
				"allOf": [{
					"$ref": "#/components/schemas/EmbedRef"
				}, {
					"required": ["run", "tell", "dat"]
				}]
			}
		}
	}
}
-- out/encoding/openapi/TestGenerateVanilla/subpathroot --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "overriddenName"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"EmbedRef": {
				"type": "object", "required": ["refField1", "refField2"]
				"properties": {
					"refField1": {
						"type": "string"
					}
					"refField2": {
						"type": "integer", "enum": [42]
					}
				}
			}
			"overriddenName": {
				"type": "object", "properties": {
					"run": {
						"type": "integer", "format": "int32"
					}
					"tell": {
						"type": "string", "format": "binary"
					}
					"dat": {
						"type": "array", "items": {
							"type": "string"
						}
					}
				}
				"allOf": [{
					"$ref": "#/components/schemas/EmbedRef"
				}, {
					"required": ["run", "tell", "dat"]
				}]
			}
		}
	}
}
-- out/bind --
Schema count: 1
Schema versions: 0.0
Lenses count: 0
-- out/encoding/gocode/TestGenerate/nil --
== joined_type_gen.go
package joined

// ExRef defines model for ExRef.
type ExRef struct {
	NormalField string `json:"normalField"`
}

// ExRefDef defines model for ExRefDef.
type ExRefDef struct {
	DefField string `json:"defField"`
}

// Joined defines model for joined.
type Joined struct {
	Foo    string   `json:"foo"`
	Ref    ExRef    `json:"ref"`
	Refdef ExRefDef `json:"refdef"`
}
-- out/encoding/gocode/TestGenerate/group --
== joined_type_gen.go
package joined

// Foo defines model for foo.
type Foo = string

// Ref defines model for ref.
type Ref struct {
	NormalField string `json:"normalField"`
}

// Refdef defines model for refdef.
type Refdef struct {
	DefField string `json:"defField"`
}
-- out/encoding/gocode/TestGenerate/depointerized --
== joined_type_gen.go
package joined

// ExRef defines model for ExRef.
type ExRef struct {
	NormalField string `json:"normalField"`
}

// ExRefDef defines model for ExRefDef.
type ExRefDef struct {
	DefField string `json:"defField"`
}

// Joined defines model for joined.
type Joined struct {
	Foo    string   `json:"foo"`
	Ref    ExRef    `json:"ref"`
	Refdef ExRefDef `json:"refdef"`
}
-- out/encoding/gocode/TestGenerate/godeclincomments --
== joined_type_gen.go
package joined

// ExRef defines model for ExRef.
type ExRef struct {
	NormalField string `json:"normalField"`
}

// ExRefDef defines model for ExRefDef.
type ExRefDef struct {
	DefField string `json:"defField"`
}

// Joined defines model for joined.
type Joined struct {
	Foo    string   `json:"foo"`
	Ref    ExRef    `json:"ref"`
	Refdef ExRefDef `json:"refdef"`
}
-- out/encoding/gocode/TestGenerate/expandref --
== joined_type_gen.go
package joined

// Joined defines model for joined.
type Joined struct {
	Foo string `json:"foo"`
	Ref struct {
		NormalField string `json:"normalField"`
	} `json:"ref"`
	Refdef struct {
		DefField string `json:"defField"`
	} `json:"refdef"`
}
-- out/encoding/openapi/TestGenerate/nilcfg --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "joined",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "ExRef": {
        "type": "object",
        "required": [
          "normalField"
        ],
        "properties": {
          "normalField": {
            "type": "string"
          }
        }
      },
      "ExRefDef": {
        "type": "object",
        "required": [
          "defField"
        ],
        "properties": {
          "defField": {
            "type": "string"
          }
        }
      },
      "joined": {
        "type": "object",
        "properties": {
          "ref": {
            "$ref": "#/components/schemas/ExRef"
          },
          "refdef": {
            "$ref": "#/components/schemas/ExRefDef"
          },
          "foo": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "required": [
              "ref",
              "refdef"
            ]
          },
          {
            "required": [
              "foo"
            ]
          }
        ]
      }
    }
  }
}
-- out/encoding/openapi/TestGenerate/group --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "joined",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "ref": {
        "type": "object",
        "required": [
          "normalField"
        ],
        "properties": {
          "normalField": {
            "type": "string"
          }
        }
      },
      "foo": {
        "type": "string"
      },
      "refdef": {
        "type": "object",
        "required": [
          "defField"
        ],
        "properties": {
          "defField": {
            "type": "string"
          }
        }
      }
    }
  }
}
-- out/encoding/openapi/TestGenerate/expandrefs --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "joined",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "joined": {
        "type": "object",
        "required": [
          "ref",
          "foo",
          "refdef"
        ],
        "properties": {
          "ref": {
            "type": "object",
            "required": [
              "normalField"
            ],
            "properties": {
              "normalField": {
                "type": "string"
              }
            }
          },
          "foo": {
            "type": "string"
          },
          "refdef": {
            "type": "object",
            "required": [
              "defField"
            ],
            "properties": {
              "defField": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}
-- out/encoding/openapi/TestGenerate/selfcontained --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "joined",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "ExRef": {
        "type": "object",
        "required": [
          "normalField"
        ],
        "properties": {
          "normalField": {
            "type": "string"
          }
        }
      },
      "ExRefDef": {
        "type": "object",
        "required": [
          "defField"
        ],
        "properties": {
          "defField": {
            "type": "string"
          }
        }
      },
      "embedref": {
        "type": "object",
        "$ref": "#/components/schemas/joinSchema"
      },
      "joinSchema": {
        "type": "object",
        "required": [
          "ref",
          "refdef"
        ],
        "properties": {
          "ref": {
            "$ref": "#/components/schemas/ExRef"
          },
          "refdef": {
            "$ref": "#/components/schemas/ExRefDef"
          }
        },
        "minProperties": 1
      },
      "joined": {
        "type": "object",
        "$ref": "#/components/schemas/embedref"
      }
    }
  }
}
