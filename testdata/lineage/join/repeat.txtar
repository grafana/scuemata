# Case where the joinSchema is exactly the same as a schema in the lineage
-- in.cue --
import "github.com/grafana/thema"

thema.#Lineage
name: "repeat"
joinSchema: {
    foo: string
}
schemas: [{
	version: [0, 0]
	schema: {
		foo: string
		someField: {
			EmbedRef
			run:  int32
			tell: bytes
			dat: [...string]
		}
	}
}]
lenses: []

EmbedRef: {
	refField1: string
	refField2: 42
}
-- out/encoding/openapi/TestGenerateVanilla/nilcfg --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "repeat"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"EmbedRef": {
				"type": "object", "required": ["refField1", "refField2"]
				"properties": {
					"refField1": {
						"type": "string"
					}
					"refField2": {
						"type": "integer", "enum": [42]
					}
				}
			}
			"repeat": {
				"type": "object", "properties": {
					"foo": {
						"type": "string"
					}
					"someField": {
						"type": "object", "properties": {
							"run": {
								"type": "integer", "format": "int32"
							}
							"tell": {
								"type": "string", "format": "binary"
							}
							"dat": {
								"type": "array", "items": {
									"type": "string"
								}
							}
						}
						"allOf": [{
							"$ref": "#/components/schemas/EmbedRef"
						}, {
							"required": ["run", "tell", "dat"]
						}]
					}
				}
				"allOf": [{
					"required": ["foo"]
				}, {
					"required": ["foo", "someField"]
				}]
			}
		}
	}
}
-- out/encoding/openapi/TestGenerateVanilla/group --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "repeat"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"foo": {
				"type": "string"
			}
			"EmbedRef": {
				"type": "object", "required": ["refField1", "refField2"]
				"properties": {
					"refField1": {
						"type": "string"
					}
					"refField2": {
						"type": "integer", "enum": [42]
					}
				}
			}
			"someField": {
				"type": "object", "properties": {
					"run": {
						"type": "integer", "format": "int32"
					}
					"tell": {
						"type": "string", "format": "binary"
					}
					"dat": {
						"type": "array", "items": {
							"type": "string"
						}
					}
				}
				"allOf": [{
					"$ref": "#/components/schemas/EmbedRef"
				}, {
					"required": ["run", "tell", "dat"]
				}]
			}
		}
	}
}
-- out/encoding/openapi/TestGenerateVanilla/expandrefs --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "repeat"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"repeat": {
				"type": "object", "required": ["foo", "someField"]
				"properties": {
					"foo": {
						"type": "string"
					}
					"someField": {
						"type": "object", "required": ["run", "tell", "refField1", "dat", "refField2"]
						"properties": {
							"run": {
								"type": "integer", "format": "int32"
							}
							"tell": {
								"type": "string", "format": "binary"
							}
							"refField1": {
								"type": "string"
							}
							"dat": {
								"type": "array", "items": {
									"type": "string"
								}
							}
							"refField2": {
								"type": "integer", "enum": [42]
							}
						}
					}
				}
			}
		}
	}
}
-- out/encoding/openapi/TestGenerateVanilla/selfcontained --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "repeat"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"joinSchema": {
				"type": "object", "required": ["foo"]
				"properties": {
					"foo": {
						"type": "string"
					}
				}
				"minProperties": 1
			}
			"oneone": {
				"type": "object", "$ref": "#/components/schemas/joinSchema"
			}
			"repeat": {
				"type": "object", "$ref": "#/components/schemas/oneone"
			}
		}
	}
}
-- out/encoding/openapi/TestGenerateVanilla/subpath --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "someField"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"EmbedRef": {
				"type": "object", "required": ["refField1", "refField2"]
				"properties": {
					"refField1": {
						"type": "string"
					}
					"refField2": {
						"type": "integer", "enum": [42]
					}
				}
			}
			"someField": {
				"type": "object", "properties": {
					"run": {
						"type": "integer", "format": "int32"
					}
					"tell": {
						"type": "string", "format": "binary"
					}
					"dat": {
						"type": "array", "items": {
							"type": "string"
						}
					}
				}
				"allOf": [{
					"$ref": "#/components/schemas/EmbedRef"
				}, {
					"required": ["run", "tell", "dat"]
				}]
			}
		}
	}
}
-- out/encoding/openapi/TestGenerateVanilla/subpathroot --
== 0.0.json
{
	"openapi": "3.0.0"
	"info": {
		"title":   "overriddenName"
		"version": "0.0"
	}
	"paths": {}
	"components": {
		"schemas": {
			"EmbedRef": {
				"type": "object", "required": ["refField1", "refField2"]
				"properties": {
					"refField1": {
						"type": "string"
					}
					"refField2": {
						"type": "integer", "enum": [42]
					}
				}
			}
			"overriddenName": {
				"type": "object", "properties": {
					"run": {
						"type": "integer", "format": "int32"
					}
					"tell": {
						"type": "string", "format": "binary"
					}
					"dat": {
						"type": "array", "items": {
							"type": "string"
						}
					}
				}
				"allOf": [{
					"$ref": "#/components/schemas/EmbedRef"
				}, {
					"required": ["run", "tell", "dat"]
				}]
			}
		}
	}
}
-- out/bind --
Schema count: 1
Schema versions: 0.0
Lenses count: 0
-- out/encoding/gocode/TestGenerate/nil --
== repeat_type_gen.go
package repeat

// Defines values for EmbedRefRefField2.
const (
	EmbedRefRefField2N42 EmbedRefRefField2 = 42
)

// Defines values for RepeatSomeFieldRefField2.
const (
	RepeatSomeFieldRefField2N42 RepeatSomeFieldRefField2 = 42
)

// EmbedRef defines model for EmbedRef.
type EmbedRef struct {
	RefField1 string            `json:"refField1"`
	RefField2 EmbedRefRefField2 `json:"refField2"`
}

// EmbedRefRefField2 defines model for EmbedRef.RefField2.
type EmbedRefRefField2 int

// Repeat defines model for repeat.
type Repeat struct {
	Foo       string `json:"foo"`
	SomeField struct {
		Dat       []string                 `json:"dat"`
		RefField1 string                   `json:"refField1"`
		RefField2 RepeatSomeFieldRefField2 `json:"refField2"`
		Run       int32                    `json:"run"`
		Tell      []byte                   `json:"tell"`
	} `json:"someField"`
}

// RepeatSomeFieldRefField2 defines model for Repeat.SomeField.RefField2.
type RepeatSomeFieldRefField2 int
-- out/encoding/gocode/TestGenerate/group --
== repeat_type_gen.go
package repeat

// Defines values for EmbedRefRefField2.
const (
	EmbedRefRefField2N42 EmbedRefRefField2 = 42
)

// Defines values for SomeFieldRefField2.
const (
	SomeFieldRefField2N42 SomeFieldRefField2 = 42
)

// EmbedRef defines model for EmbedRef.
type EmbedRef struct {
	RefField1 string            `json:"refField1"`
	RefField2 EmbedRefRefField2 `json:"refField2"`
}

// EmbedRefRefField2 defines model for EmbedRef.RefField2.
type EmbedRefRefField2 int

// Foo defines model for foo.
type Foo = string

// SomeField defines model for someField.
type SomeField struct {
	Dat       []string           `json:"dat"`
	RefField1 string             `json:"refField1"`
	RefField2 SomeFieldRefField2 `json:"refField2"`
	Run       int32              `json:"run"`
	Tell      []byte             `json:"tell"`
}

// SomeFieldRefField2 defines model for SomeField.RefField2.
type SomeFieldRefField2 int
-- out/encoding/gocode/TestGenerate/depointerized --
== repeat_type_gen.go
package repeat

// Defines values for EmbedRefRefField2.
const (
	EmbedRefRefField2N42 EmbedRefRefField2 = 42
)

// Defines values for RepeatSomeFieldRefField2.
const (
	RepeatSomeFieldRefField2N42 RepeatSomeFieldRefField2 = 42
)

// EmbedRef defines model for EmbedRef.
type EmbedRef struct {
	RefField1 string            `json:"refField1"`
	RefField2 EmbedRefRefField2 `json:"refField2"`
}

// EmbedRefRefField2 defines model for EmbedRef.RefField2.
type EmbedRefRefField2 int

// Repeat defines model for repeat.
type Repeat struct {
	Foo       string `json:"foo"`
	SomeField struct {
		Dat       []string                 `json:"dat"`
		RefField1 string                   `json:"refField1"`
		RefField2 RepeatSomeFieldRefField2 `json:"refField2"`
		Run       int32                    `json:"run"`
		Tell      []byte                   `json:"tell"`
	} `json:"someField"`
}

// RepeatSomeFieldRefField2 defines model for Repeat.SomeField.RefField2.
type RepeatSomeFieldRefField2 int
-- out/encoding/gocode/TestGenerate/godeclincomments --
== repeat_type_gen.go
package repeat

// Defines values for EmbedRefRefField2.
const (
	EmbedRefRefField2N42 EmbedRefRefField2 = 42
)

// Defines values for RepeatSomeFieldRefField2.
const (
	RepeatSomeFieldRefField2N42 RepeatSomeFieldRefField2 = 42
)

// EmbedRef defines model for EmbedRef.
type EmbedRef struct {
	RefField1 string            `json:"refField1"`
	RefField2 EmbedRefRefField2 `json:"refField2"`
}

// EmbedRefRefField2 defines model for EmbedRef.RefField2.
type EmbedRefRefField2 int

// Repeat defines model for repeat.
type Repeat struct {
	Foo       string `json:"foo"`
	SomeField struct {
		Dat       []string                 `json:"dat"`
		RefField1 string                   `json:"refField1"`
		RefField2 RepeatSomeFieldRefField2 `json:"refField2"`
		Run       int32                    `json:"run"`
		Tell      []byte                   `json:"tell"`
	} `json:"someField"`
}

// RepeatSomeFieldRefField2 defines model for Repeat.SomeField.RefField2.
type RepeatSomeFieldRefField2 int
-- out/encoding/gocode/TestGenerate/expandref --
== repeat_type_gen.go
package repeat

// Defines values for RepeatSomeFieldRefField2.
const (
	RepeatSomeFieldRefField2N42 RepeatSomeFieldRefField2 = 42
)

// Repeat defines model for repeat.
type Repeat struct {
	Foo       string `json:"foo"`
	SomeField struct {
		Dat       []string                 `json:"dat"`
		RefField1 string                   `json:"refField1"`
		RefField2 RepeatSomeFieldRefField2 `json:"refField2"`
		Run       int32                    `json:"run"`
		Tell      []byte                   `json:"tell"`
	} `json:"someField"`
}

// RepeatSomeFieldRefField2 defines model for Repeat.SomeField.RefField2.
type RepeatSomeFieldRefField2 int
-- out/encoding/openapi/TestGenerate/nilcfg --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "repeat",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "EmbedRef": {
        "type": "object",
        "required": [
          "refField1",
          "refField2"
        ],
        "properties": {
          "refField1": {
            "type": "string"
          },
          "refField2": {
            "type": "integer",
            "enum": [
              42
            ]
          }
        }
      },
      "repeat": {
        "type": "object",
        "properties": {
          "foo": {
            "type": "string"
          },
          "someField": {
            "type": "object",
            "properties": {
              "run": {
                "type": "integer",
                "format": "int32"
              },
              "tell": {
                "type": "string",
                "format": "binary"
              },
              "dat": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/EmbedRef"
              },
              {
                "required": [
                  "run",
                  "tell",
                  "dat"
                ]
              }
            ]
          }
        },
        "allOf": [
          {
            "required": [
              "foo"
            ]
          },
          {
            "required": [
              "foo",
              "someField"
            ]
          }
        ]
      }
    }
  }
}
-- out/encoding/openapi/TestGenerate/group --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "repeat",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "foo": {
        "type": "string"
      },
      "EmbedRef": {
        "type": "object",
        "required": [
          "refField1",
          "refField2"
        ],
        "properties": {
          "refField1": {
            "type": "string"
          },
          "refField2": {
            "type": "integer",
            "enum": [
              42
            ]
          }
        }
      },
      "someField": {
        "type": "object",
        "properties": {
          "run": {
            "type": "integer",
            "format": "int32"
          },
          "tell": {
            "type": "string",
            "format": "binary"
          },
          "dat": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EmbedRef"
          },
          {
            "required": [
              "run",
              "tell",
              "dat"
            ]
          }
        ]
      }
    }
  }
}
-- out/encoding/openapi/TestGenerate/expandrefs --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "repeat",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "repeat": {
        "type": "object",
        "required": [
          "foo",
          "someField"
        ],
        "properties": {
          "foo": {
            "type": "string"
          },
          "someField": {
            "type": "object",
            "required": [
              "run",
              "tell",
              "refField1",
              "dat",
              "refField2"
            ],
            "properties": {
              "run": {
                "type": "integer",
                "format": "int32"
              },
              "tell": {
                "type": "string",
                "format": "binary"
              },
              "refField1": {
                "type": "string"
              },
              "dat": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "refField2": {
                "type": "integer",
                "enum": [
                  42
                ]
              }
            }
          }
        }
      }
    }
  }
}
-- out/encoding/openapi/TestGenerate/selfcontained --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "repeat",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "joinSchema": {
        "type": "object",
        "required": [
          "foo"
        ],
        "properties": {
          "foo": {
            "type": "string"
          }
        },
        "minProperties": 1
      },
      "oneone": {
        "type": "object",
        "$ref": "#/components/schemas/joinSchema"
      },
      "repeat": {
        "type": "object",
        "$ref": "#/components/schemas/oneone"
      }
    }
  }
}
