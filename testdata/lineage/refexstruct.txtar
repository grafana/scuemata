# schema contains a reference to an external type of struct kind
-- in.cue --
import "github.com/grafana/thema"

thema.#Lineage
name: "refexstruct"
schemas: [{
	version: [0, 0]
	schema: {
		aBaz: #Baz
	}
}]
lenses: []

#Baz: {
    run:  string
    tell: bytes
    dat:  int32
}
-- out/bind --
Schema count: 1
Schema versions: 0.0
Lenses count: 0
-- out/encoding/openapi/TestGenerate/nilcfg --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "refexstruct",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "Baz": {
        "type": "object",
        "required": [
          "run",
          "tell",
          "dat"
        ],
        "properties": {
          "run": {
            "type": "string"
          },
          "tell": {
            "type": "string",
            "format": "binary"
          },
          "dat": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "refexstruct": {
        "type": "object",
        "required": [
          "aBaz"
        ],
        "properties": {
          "aBaz": {
            "$ref": "#/components/schemas/Baz"
          }
        }
      }
    }
  }
}
-- out/encoding/openapi/TestGenerate/expandrefs --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "refexstruct",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "refexstruct": {
        "type": "object",
        "required": [
          "aBaz"
        ],
        "properties": {
          "aBaz": {
            "type": "object",
            "required": [
              "run",
              "tell",
              "dat"
            ],
            "properties": {
              "run": {
                "type": "string"
              },
              "tell": {
                "type": "string",
                "format": "binary"
              },
              "dat": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      }
    }
  }
}
-- out/encoding/openapi/TestGenerate/group --
== 0.0.json
{
  "openapi": "3.0.0",
  "info": {
    "title": "refexstruct",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "aBaz": {
        "type": "object",
        "required": [
          "run",
          "tell",
          "dat"
        ],
        "properties": {
          "run": {
            "type": "string"
          },
          "tell": {
            "type": "string",
            "format": "binary"
          },
          "dat": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    }
  }
}
-- out/encoding/gocode/TestGenerate/nilcfg --
== refexstruct_type_0.0_gen.go
package refexstruct

// Baz defines model for Baz.
type Baz struct {
	Dat  int32  `json:"dat"`
	Run  string `json:"run"`
	Tell []byte `json:"tell"`
}

// Refexstruct defines model for refexstruct.
type Refexstruct struct {
	ABaz Baz `json:"aBaz"`
}
-- out/encoding/gocode/TestGenerate/group --
== refexstruct_type_0.0_gen.go
package refexstruct

// ABaz defines model for aBaz.
type ABaz struct {
	Dat  int32  `json:"dat"`
	Run  string `json:"run"`
	Tell []byte `json:"tell"`
}
-- out/encoding/gocode/TestGenerate/depointerized --
== refexstruct_type_0.0_gen.go
package refexstruct

// Baz defines model for Baz.
type Baz struct {
	Dat  int32  `json:"dat"`
	Run  string `json:"run"`
	Tell []byte `json:"tell"`
}

// Refexstruct defines model for refexstruct.
type Refexstruct struct {
	ABaz Baz `json:"aBaz"`
}
